# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Task {
  id: ID!
  title: String!
  userId: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserCount {
  tasks: Int!
}

type User {
  id: ID!

  """@Validator.@IsEmail()"""
  email: String!
  name: String!
  hashedRefreshToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
  tasks: [Task!]
  _count: UserCount!
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  user: User!
}

type Query {
  user(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  allTask(where: TaskWhereInput, orderBy: [TaskOrderByWithRelationInput!], cursor: TaskWhereUniqueInput, take: Int, skip: Int, distinct: [TaskScalarFieldEnum!]): [Task!]!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
  hashedRefreshToken: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  tasks: TaskListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input TaskListRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: StringFilter
  title: StringFilter
  userId: StringFilter
  user: UserRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
  hashedRefreshToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  tasks: TaskOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  id: String
  email: String
}

enum UserScalarFieldEnum {
  id
  email
  name
  password
  hashedRefreshToken
  createdAt
  updatedAt
}

input TaskOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TaskWhereUniqueInput {
  id: String
}

enum TaskScalarFieldEnum {
  id
  title
  userId
  createdAt
  updatedAt
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  refreshToken: LoginResponse!
  logout: Boolean!
  createTask(data: TaskCreateInput!): Task!
}

input UserCreateInput {
  id: String
  email: String!
  name: String!
  password: String!
  hashedRefreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
  tasks: TaskCreateNestedManyWithoutUserInput
}

input TaskCreateNestedManyWithoutUserInput {
  create: [TaskCreateWithoutUserInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutUserInput {
  id: String
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TaskCreateOrConnectWithoutUserInput {
  where: TaskWhereUniqueInput!
  create: TaskCreateWithoutUserInput!
}

input TaskCreateManyUserInputEnvelope {
  data: [TaskCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TaskCreateManyUserInput {
  id: String
  title: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input LoginUserInput {
  email: String!
  password: String!
}

input TaskCreateInput {
  id: String
  title: String!
  user: UserCreateNestedOneWithoutTasksInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutTasksInput {
  create: UserCreateWithoutTasksInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTasksInput {
  id: String
  email: String!
  name: String!
  password: String!
  hashedRefreshToken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutTasksInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTasksInput!
}
